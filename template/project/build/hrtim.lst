ARM GAS  /tmp/ccDdYIMt.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"hrtim.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.HAL_HRTIM_MspInit,"ax",%progbits
  19              		.align	1
  20              		.global	HAL_HRTIM_MspInit
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	HAL_HRTIM_MspInit:
  26              	.LVL0:
  27              	.LFB336:
  28              		.file 1 "Src/hrtim.c"
   1:Src/hrtim.c   **** /* USER CODE BEGIN Header */
   2:Src/hrtim.c   **** /**
   3:Src/hrtim.c   ****   ******************************************************************************
   4:Src/hrtim.c   ****   * @file    hrtim.c
   5:Src/hrtim.c   ****   * @brief   This file provides code for the configuration
   6:Src/hrtim.c   ****   *          of the HRTIM instances.
   7:Src/hrtim.c   ****   ******************************************************************************
   8:Src/hrtim.c   ****   * @attention
   9:Src/hrtim.c   ****   *
  10:Src/hrtim.c   ****   * Copyright (c) 2024 STMicroelectronics.
  11:Src/hrtim.c   ****   * All rights reserved.
  12:Src/hrtim.c   ****   *
  13:Src/hrtim.c   ****   * This software is licensed under terms that can be found in the LICENSE file
  14:Src/hrtim.c   ****   * in the root directory of this software component.
  15:Src/hrtim.c   ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  16:Src/hrtim.c   ****   *
  17:Src/hrtim.c   ****   ******************************************************************************
  18:Src/hrtim.c   ****   */
  19:Src/hrtim.c   **** /* USER CODE END Header */
  20:Src/hrtim.c   **** /* Includes ------------------------------------------------------------------*/
  21:Src/hrtim.c   **** #include "hrtim.h"
  22:Src/hrtim.c   **** 
  23:Src/hrtim.c   **** /* USER CODE BEGIN 0 */
  24:Src/hrtim.c   **** 
  25:Src/hrtim.c   **** /* USER CODE END 0 */
  26:Src/hrtim.c   **** 
  27:Src/hrtim.c   **** HRTIM_HandleTypeDef hhrtim;
  28:Src/hrtim.c   **** 
  29:Src/hrtim.c   **** /* HRTIM init function */
  30:Src/hrtim.c   **** void MX_HRTIM_Init(void)
ARM GAS  /tmp/ccDdYIMt.s 			page 2


  31:Src/hrtim.c   **** {
  32:Src/hrtim.c   **** 
  33:Src/hrtim.c   ****   /* USER CODE BEGIN HRTIM_Init 0 */
  34:Src/hrtim.c   **** 
  35:Src/hrtim.c   ****   /* USER CODE END HRTIM_Init 0 */
  36:Src/hrtim.c   **** 
  37:Src/hrtim.c   ****   HRTIM_FaultCfgTypeDef pFaultCfg = {0};
  38:Src/hrtim.c   ****   HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
  39:Src/hrtim.c   ****   HRTIM_TimerCfgTypeDef pTimerCfg = {0};
  40:Src/hrtim.c   ****   HRTIM_OutputCfgTypeDef pOutputCfg = {0};
  41:Src/hrtim.c   **** 
  42:Src/hrtim.c   ****   /* USER CODE BEGIN HRTIM_Init 1 */
  43:Src/hrtim.c   **** 
  44:Src/hrtim.c   ****   /* USER CODE END HRTIM_Init 1 */
  45:Src/hrtim.c   ****   hhrtim.Instance = HRTIM1;
  46:Src/hrtim.c   ****   hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
  47:Src/hrtim.c   ****   hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
  48:Src/hrtim.c   ****   if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
  49:Src/hrtim.c   ****   {
  50:Src/hrtim.c   ****     Error_Handler();
  51:Src/hrtim.c   ****   }
  52:Src/hrtim.c   ****   if (HAL_HRTIM_FaultPrescalerConfig(&hhrtim, HRTIM_FAULTPRESCALER_DIV1) != HAL_OK)
  53:Src/hrtim.c   ****   {
  54:Src/hrtim.c   ****     Error_Handler();
  55:Src/hrtim.c   ****   }
  56:Src/hrtim.c   ****   pFaultCfg.Source = HRTIM_FAULTSOURCE_DIGITALINPUT;
  57:Src/hrtim.c   ****   pFaultCfg.Polarity = HRTIM_FAULTPOLARITY_HIGH;
  58:Src/hrtim.c   ****   pFaultCfg.Filter = HRTIM_FAULTFILTER_NONE;
  59:Src/hrtim.c   ****   pFaultCfg.Lock = HRTIM_FAULTLOCK_READWRITE;
  60:Src/hrtim.c   ****   if (HAL_HRTIM_FaultConfig(&hhrtim, HRTIM_FAULT_3, &pFaultCfg) != HAL_OK)
  61:Src/hrtim.c   ****   {
  62:Src/hrtim.c   ****     Error_Handler();
  63:Src/hrtim.c   ****   }
  64:Src/hrtim.c   ****   HAL_HRTIM_FaultModeCtl(&hhrtim, HRTIM_FAULT_3, HRTIM_FAULTMODECTL_ENABLED);
  65:Src/hrtim.c   ****   pTimeBaseCfg.Period = 0xFFFD;
  66:Src/hrtim.c   ****   pTimeBaseCfg.RepetitionCounter = 0x00;
  67:Src/hrtim.c   ****   pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
  68:Src/hrtim.c   ****   pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
  69:Src/hrtim.c   ****   if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
  70:Src/hrtim.c   ****   {
  71:Src/hrtim.c   ****     Error_Handler();
  72:Src/hrtim.c   ****   }
  73:Src/hrtim.c   ****   pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
  74:Src/hrtim.c   ****   pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
  75:Src/hrtim.c   ****   pTimerCfg.DMASrcAddress = 0x0000;
  76:Src/hrtim.c   ****   pTimerCfg.DMADstAddress = 0x0000;
  77:Src/hrtim.c   ****   pTimerCfg.DMASize = 0x1;
  78:Src/hrtim.c   ****   pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
  79:Src/hrtim.c   ****   pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
  80:Src/hrtim.c   ****   pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
  81:Src/hrtim.c   ****   pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
  82:Src/hrtim.c   ****   pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
  83:Src/hrtim.c   ****   pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
  84:Src/hrtim.c   ****   pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
  85:Src/hrtim.c   ****   pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
  86:Src/hrtim.c   ****   pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
  87:Src/hrtim.c   ****   pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
ARM GAS  /tmp/ccDdYIMt.s 			page 3


  88:Src/hrtim.c   ****   pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
  89:Src/hrtim.c   ****   pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
  90:Src/hrtim.c   ****   pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
  91:Src/hrtim.c   ****   pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
  92:Src/hrtim.c   ****   pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
  93:Src/hrtim.c   ****   pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
  94:Src/hrtim.c   ****   if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
  95:Src/hrtim.c   ****   {
  96:Src/hrtim.c   ****     Error_Handler();
  97:Src/hrtim.c   ****   }
  98:Src/hrtim.c   ****   pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
  99:Src/hrtim.c   ****   if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 100:Src/hrtim.c   ****   {
 101:Src/hrtim.c   ****     Error_Handler();
 102:Src/hrtim.c   ****   }
 103:Src/hrtim.c   ****   pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 104:Src/hrtim.c   ****   pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 105:Src/hrtim.c   ****   pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 106:Src/hrtim.c   ****   pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 107:Src/hrtim.c   ****   pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 108:Src/hrtim.c   ****   pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 109:Src/hrtim.c   ****   pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 110:Src/hrtim.c   ****   pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 111:Src/hrtim.c   ****   if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputC
 112:Src/hrtim.c   ****   {
 113:Src/hrtim.c   ****     Error_Handler();
 114:Src/hrtim.c   ****   }
 115:Src/hrtim.c   ****   if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputC
 116:Src/hrtim.c   ****   {
 117:Src/hrtim.c   ****     Error_Handler();
 118:Src/hrtim.c   ****   }
 119:Src/hrtim.c   ****   if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputC
 120:Src/hrtim.c   ****   {
 121:Src/hrtim.c   ****     Error_Handler();
 122:Src/hrtim.c   ****   }
 123:Src/hrtim.c   ****   if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE2, &pOutputC
 124:Src/hrtim.c   ****   {
 125:Src/hrtim.c   ****     Error_Handler();
 126:Src/hrtim.c   ****   }
 127:Src/hrtim.c   ****   if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 128:Src/hrtim.c   ****   {
 129:Src/hrtim.c   ****     Error_Handler();
 130:Src/hrtim.c   ****   }
 131:Src/hrtim.c   ****   /* USER CODE BEGIN HRTIM_Init 2 */
 132:Src/hrtim.c   **** 
 133:Src/hrtim.c   ****   /* USER CODE END HRTIM_Init 2 */
 134:Src/hrtim.c   ****   HAL_HRTIM_MspPostInit(&hhrtim);
 135:Src/hrtim.c   **** 
 136:Src/hrtim.c   **** }
 137:Src/hrtim.c   **** 
 138:Src/hrtim.c   **** void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
 139:Src/hrtim.c   **** {
  29              		.loc 1 139 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 224
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		.loc 1 139 1 is_stmt 0 view .LVU1
ARM GAS  /tmp/ccDdYIMt.s 			page 4


  34 0000 10B5     		push	{r4, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 4, -8
  38              		.cfi_offset 14, -4
  39 0002 B8B0     		sub	sp, sp, #224
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 232
  42 0004 0446     		mov	r4, r0
 140:Src/hrtim.c   **** 
 141:Src/hrtim.c   ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  43              		.loc 1 141 3 is_stmt 1 view .LVU2
  44              		.loc 1 141 20 is_stmt 0 view .LVU3
  45 0006 0021     		movs	r1, #0
  46 0008 3391     		str	r1, [sp, #204]
  47 000a 3491     		str	r1, [sp, #208]
  48 000c 3591     		str	r1, [sp, #212]
  49 000e 3691     		str	r1, [sp, #216]
  50 0010 3791     		str	r1, [sp, #220]
 142:Src/hrtim.c   ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
  51              		.loc 1 142 3 is_stmt 1 view .LVU4
  52              		.loc 1 142 28 is_stmt 0 view .LVU5
  53 0012 C022     		movs	r2, #192
  54 0014 02A8     		add	r0, sp, #8
  55              	.LVL1:
  56              		.loc 1 142 28 view .LVU6
  57 0016 FFF7FEFF 		bl	memset
  58              	.LVL2:
 143:Src/hrtim.c   ****   if(hrtimHandle->Instance==HRTIM1)
  59              		.loc 1 143 3 is_stmt 1 view .LVU7
  60              		.loc 1 143 17 is_stmt 0 view .LVU8
  61 001a 2268     		ldr	r2, [r4]
  62              		.loc 1 143 5 view .LVU9
  63 001c 1B4B     		ldr	r3, .L7
  64 001e 9A42     		cmp	r2, r3
  65 0020 01D0     		beq	.L5
  66              	.L1:
 144:Src/hrtim.c   ****   {
 145:Src/hrtim.c   ****   /* USER CODE BEGIN HRTIM1_MspInit 0 */
 146:Src/hrtim.c   **** 
 147:Src/hrtim.c   ****   /* USER CODE END HRTIM1_MspInit 0 */
 148:Src/hrtim.c   **** 
 149:Src/hrtim.c   ****   /** Initializes the peripherals clock
 150:Src/hrtim.c   ****   */
 151:Src/hrtim.c   ****     PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 152:Src/hrtim.c   ****     PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 153:Src/hrtim.c   ****     if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 154:Src/hrtim.c   ****     {
 155:Src/hrtim.c   ****       Error_Handler();
 156:Src/hrtim.c   ****     }
 157:Src/hrtim.c   **** 
 158:Src/hrtim.c   ****     /* HRTIM1 clock enable */
 159:Src/hrtim.c   ****     __HAL_RCC_HRTIM1_CLK_ENABLE();
 160:Src/hrtim.c   **** 
 161:Src/hrtim.c   ****     __HAL_RCC_GPIOD_CLK_ENABLE();
 162:Src/hrtim.c   ****     /**HRTIM GPIO Configuration
 163:Src/hrtim.c   ****     PD4     ------> HRTIM_FLT3
ARM GAS  /tmp/ccDdYIMt.s 			page 5


 164:Src/hrtim.c   ****     */
 165:Src/hrtim.c   ****     GPIO_InitStruct.Pin = GPIO_PIN_4;
 166:Src/hrtim.c   ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 167:Src/hrtim.c   ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 168:Src/hrtim.c   ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 169:Src/hrtim.c   ****     GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 170:Src/hrtim.c   ****     HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 171:Src/hrtim.c   **** 
 172:Src/hrtim.c   ****   /* USER CODE BEGIN HRTIM1_MspInit 1 */
 173:Src/hrtim.c   **** 
 174:Src/hrtim.c   ****   /* USER CODE END HRTIM1_MspInit 1 */
 175:Src/hrtim.c   ****   }
 176:Src/hrtim.c   **** }
  67              		.loc 1 176 1 view .LVU10
  68 0022 38B0     		add	sp, sp, #224
  69              	.LCFI2:
  70              		.cfi_remember_state
  71              		.cfi_def_cfa_offset 8
  72              		@ sp needed
  73 0024 10BD     		pop	{r4, pc}
  74              	.LVL3:
  75              	.L5:
  76              	.LCFI3:
  77              		.cfi_restore_state
 151:Src/hrtim.c   ****     PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
  78              		.loc 1 151 5 is_stmt 1 view .LVU11
 151:Src/hrtim.c   ****     PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
  79              		.loc 1 151 46 is_stmt 0 view .LVU12
  80 0026 4FF08052 		mov	r2, #268435456
  81 002a 0023     		movs	r3, #0
  82 002c CDE90223 		strd	r2, [sp, #8]
 152:Src/hrtim.c   ****     if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  83              		.loc 1 152 5 is_stmt 1 view .LVU13
 153:Src/hrtim.c   ****     {
  84              		.loc 1 153 5 view .LVU14
 153:Src/hrtim.c   ****     {
  85              		.loc 1 153 9 is_stmt 0 view .LVU15
  86 0030 02A8     		add	r0, sp, #8
  87 0032 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
  88              	.LVL4:
 153:Src/hrtim.c   ****     {
  89              		.loc 1 153 8 view .LVU16
  90 0036 28BB     		cbnz	r0, .L6
  91              	.L3:
 159:Src/hrtim.c   **** 
  92              		.loc 1 159 5 is_stmt 1 view .LVU17
  93              	.LBB2:
 159:Src/hrtim.c   **** 
  94              		.loc 1 159 5 view .LVU18
 159:Src/hrtim.c   **** 
  95              		.loc 1 159 5 view .LVU19
  96 0038 154B     		ldr	r3, .L7+4
  97 003a D3F8F020 		ldr	r2, [r3, #240]
  98 003e 42F00052 		orr	r2, r2, #536870912
  99 0042 C3F8F020 		str	r2, [r3, #240]
 159:Src/hrtim.c   **** 
 100              		.loc 1 159 5 view .LVU20
ARM GAS  /tmp/ccDdYIMt.s 			page 6


 101 0046 D3F8F020 		ldr	r2, [r3, #240]
 102 004a 02F00052 		and	r2, r2, #536870912
 103 004e 0092     		str	r2, [sp]
 159:Src/hrtim.c   **** 
 104              		.loc 1 159 5 view .LVU21
 105 0050 009A     		ldr	r2, [sp]
 106              	.LBE2:
 159:Src/hrtim.c   **** 
 107              		.loc 1 159 5 view .LVU22
 161:Src/hrtim.c   ****     /**HRTIM GPIO Configuration
 108              		.loc 1 161 5 view .LVU23
 109              	.LBB3:
 161:Src/hrtim.c   ****     /**HRTIM GPIO Configuration
 110              		.loc 1 161 5 view .LVU24
 161:Src/hrtim.c   ****     /**HRTIM GPIO Configuration
 111              		.loc 1 161 5 view .LVU25
 112 0052 D3F8E020 		ldr	r2, [r3, #224]
 113 0056 42F00802 		orr	r2, r2, #8
 114 005a C3F8E020 		str	r2, [r3, #224]
 161:Src/hrtim.c   ****     /**HRTIM GPIO Configuration
 115              		.loc 1 161 5 view .LVU26
 116 005e D3F8E030 		ldr	r3, [r3, #224]
 117 0062 03F00803 		and	r3, r3, #8
 118 0066 0193     		str	r3, [sp, #4]
 161:Src/hrtim.c   ****     /**HRTIM GPIO Configuration
 119              		.loc 1 161 5 view .LVU27
 120 0068 019B     		ldr	r3, [sp, #4]
 121              	.LBE3:
 161:Src/hrtim.c   ****     /**HRTIM GPIO Configuration
 122              		.loc 1 161 5 view .LVU28
 165:Src/hrtim.c   ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 123              		.loc 1 165 5 view .LVU29
 165:Src/hrtim.c   ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 124              		.loc 1 165 25 is_stmt 0 view .LVU30
 125 006a 1023     		movs	r3, #16
 126 006c 3393     		str	r3, [sp, #204]
 166:Src/hrtim.c   ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 127              		.loc 1 166 5 is_stmt 1 view .LVU31
 166:Src/hrtim.c   ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 128              		.loc 1 166 26 is_stmt 0 view .LVU32
 129 006e 0223     		movs	r3, #2
 130 0070 3493     		str	r3, [sp, #208]
 167:Src/hrtim.c   ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 131              		.loc 1 167 5 is_stmt 1 view .LVU33
 167:Src/hrtim.c   ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 132              		.loc 1 167 26 is_stmt 0 view .LVU34
 133 0072 0022     		movs	r2, #0
 134 0074 3592     		str	r2, [sp, #212]
 168:Src/hrtim.c   ****     GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 135              		.loc 1 168 5 is_stmt 1 view .LVU35
 168:Src/hrtim.c   ****     GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 136              		.loc 1 168 27 is_stmt 0 view .LVU36
 137 0076 3692     		str	r2, [sp, #216]
 169:Src/hrtim.c   ****     HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 138              		.loc 1 169 5 is_stmt 1 view .LVU37
 169:Src/hrtim.c   ****     HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 139              		.loc 1 169 31 is_stmt 0 view .LVU38
ARM GAS  /tmp/ccDdYIMt.s 			page 7


 140 0078 3793     		str	r3, [sp, #220]
 170:Src/hrtim.c   **** 
 141              		.loc 1 170 5 is_stmt 1 view .LVU39
 142 007a 33A9     		add	r1, sp, #204
 143 007c 0548     		ldr	r0, .L7+8
 144 007e FFF7FEFF 		bl	HAL_GPIO_Init
 145              	.LVL5:
 146              		.loc 1 176 1 is_stmt 0 view .LVU40
 147 0082 CEE7     		b	.L1
 148              	.L6:
 155:Src/hrtim.c   ****     }
 149              		.loc 1 155 7 is_stmt 1 view .LVU41
 150 0084 FFF7FEFF 		bl	Error_Handler
 151              	.LVL6:
 152 0088 D6E7     		b	.L3
 153              	.L8:
 154 008a 00BF     		.align	2
 155              	.L7:
 156 008c 00740140 		.word	1073837056
 157 0090 00440258 		.word	1476543488
 158 0094 000C0258 		.word	1476529152
 159              		.cfi_endproc
 160              	.LFE336:
 162              		.section	.text.HAL_HRTIM_MspPostInit,"ax",%progbits
 163              		.align	1
 164              		.global	HAL_HRTIM_MspPostInit
 165              		.syntax unified
 166              		.thumb
 167              		.thumb_func
 169              	HAL_HRTIM_MspPostInit:
 170              	.LVL7:
 171              	.LFB337:
 177:Src/hrtim.c   **** 
 178:Src/hrtim.c   **** void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
 179:Src/hrtim.c   **** {
 172              		.loc 1 179 1 view -0
 173              		.cfi_startproc
 174              		@ args = 0, pretend = 0, frame = 32
 175              		@ frame_needed = 0, uses_anonymous_args = 0
 176              		.loc 1 179 1 is_stmt 0 view .LVU43
 177 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 178              	.LCFI4:
 179              		.cfi_def_cfa_offset 20
 180              		.cfi_offset 4, -20
 181              		.cfi_offset 5, -16
 182              		.cfi_offset 6, -12
 183              		.cfi_offset 7, -8
 184              		.cfi_offset 14, -4
 185 0002 89B0     		sub	sp, sp, #36
 186              	.LCFI5:
 187              		.cfi_def_cfa_offset 56
 180:Src/hrtim.c   **** 
 181:Src/hrtim.c   ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 188              		.loc 1 181 3 is_stmt 1 view .LVU44
 189              		.loc 1 181 20 is_stmt 0 view .LVU45
 190 0004 0023     		movs	r3, #0
 191 0006 0393     		str	r3, [sp, #12]
ARM GAS  /tmp/ccDdYIMt.s 			page 8


 192 0008 0493     		str	r3, [sp, #16]
 193 000a 0593     		str	r3, [sp, #20]
 194 000c 0693     		str	r3, [sp, #24]
 195 000e 0793     		str	r3, [sp, #28]
 182:Src/hrtim.c   ****   if(hrtimHandle->Instance==HRTIM1)
 196              		.loc 1 182 3 is_stmt 1 view .LVU46
 197              		.loc 1 182 17 is_stmt 0 view .LVU47
 198 0010 0268     		ldr	r2, [r0]
 199              		.loc 1 182 5 view .LVU48
 200 0012 254B     		ldr	r3, .L13
 201 0014 9A42     		cmp	r2, r3
 202 0016 01D0     		beq	.L12
 203              	.LVL8:
 204              	.L9:
 183:Src/hrtim.c   ****   {
 184:Src/hrtim.c   ****   /* USER CODE BEGIN HRTIM1_MspPostInit 0 */
 185:Src/hrtim.c   **** 
 186:Src/hrtim.c   ****   /* USER CODE END HRTIM1_MspPostInit 0 */
 187:Src/hrtim.c   **** 
 188:Src/hrtim.c   ****     __HAL_RCC_GPIOE_CLK_ENABLE();
 189:Src/hrtim.c   ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 190:Src/hrtim.c   ****     __HAL_RCC_GPIOG_CLK_ENABLE();
 191:Src/hrtim.c   ****     /**HRTIM GPIO Configuration
 192:Src/hrtim.c   ****     PE1     ------> HRTIM_SCOUT
 193:Src/hrtim.c   ****     PC7     ------> HRTIM_CHA2
 194:Src/hrtim.c   ****     PC6     ------> HRTIM_CHA1
 195:Src/hrtim.c   ****     PG7     ------> HRTIM_CHE2
 196:Src/hrtim.c   ****     PG6     ------> HRTIM_CHE1
 197:Src/hrtim.c   ****     */
 198:Src/hrtim.c   ****     GPIO_InitStruct.Pin = GPIO_PIN_1;
 199:Src/hrtim.c   ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 200:Src/hrtim.c   ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 201:Src/hrtim.c   ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 202:Src/hrtim.c   ****     GPIO_InitStruct.Alternate = GPIO_AF3_HRTIM1;
 203:Src/hrtim.c   ****     HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 204:Src/hrtim.c   **** 
 205:Src/hrtim.c   ****     GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 206:Src/hrtim.c   ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 207:Src/hrtim.c   ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 208:Src/hrtim.c   ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 209:Src/hrtim.c   ****     GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 210:Src/hrtim.c   ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 211:Src/hrtim.c   **** 
 212:Src/hrtim.c   ****     GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 213:Src/hrtim.c   ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 214:Src/hrtim.c   ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 215:Src/hrtim.c   ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 216:Src/hrtim.c   ****     GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 217:Src/hrtim.c   ****     HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 218:Src/hrtim.c   **** 
 219:Src/hrtim.c   ****   /* USER CODE BEGIN HRTIM1_MspPostInit 1 */
 220:Src/hrtim.c   **** 
 221:Src/hrtim.c   ****   /* USER CODE END HRTIM1_MspPostInit 1 */
 222:Src/hrtim.c   ****   }
 223:Src/hrtim.c   **** 
 224:Src/hrtim.c   **** }
 205              		.loc 1 224 1 view .LVU49
ARM GAS  /tmp/ccDdYIMt.s 			page 9


 206 0018 09B0     		add	sp, sp, #36
 207              	.LCFI6:
 208              		.cfi_remember_state
 209              		.cfi_def_cfa_offset 20
 210              		@ sp needed
 211 001a F0BD     		pop	{r4, r5, r6, r7, pc}
 212              	.LVL9:
 213              	.L12:
 214              	.LCFI7:
 215              		.cfi_restore_state
 188:Src/hrtim.c   ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 216              		.loc 1 188 5 is_stmt 1 view .LVU50
 217              	.LBB4:
 188:Src/hrtim.c   ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 218              		.loc 1 188 5 view .LVU51
 188:Src/hrtim.c   ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 219              		.loc 1 188 5 view .LVU52
 220 001c 234B     		ldr	r3, .L13+4
 221 001e D3F8E020 		ldr	r2, [r3, #224]
 222 0022 42F01002 		orr	r2, r2, #16
 223 0026 C3F8E020 		str	r2, [r3, #224]
 188:Src/hrtim.c   ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 224              		.loc 1 188 5 view .LVU53
 225 002a D3F8E020 		ldr	r2, [r3, #224]
 226 002e 02F01002 		and	r2, r2, #16
 227 0032 0092     		str	r2, [sp]
 188:Src/hrtim.c   ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 228              		.loc 1 188 5 view .LVU54
 229 0034 009A     		ldr	r2, [sp]
 230              	.LBE4:
 188:Src/hrtim.c   ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 231              		.loc 1 188 5 view .LVU55
 189:Src/hrtim.c   ****     __HAL_RCC_GPIOG_CLK_ENABLE();
 232              		.loc 1 189 5 view .LVU56
 233              	.LBB5:
 189:Src/hrtim.c   ****     __HAL_RCC_GPIOG_CLK_ENABLE();
 234              		.loc 1 189 5 view .LVU57
 189:Src/hrtim.c   ****     __HAL_RCC_GPIOG_CLK_ENABLE();
 235              		.loc 1 189 5 view .LVU58
 236 0036 D3F8E020 		ldr	r2, [r3, #224]
 237 003a 42F00402 		orr	r2, r2, #4
 238 003e C3F8E020 		str	r2, [r3, #224]
 189:Src/hrtim.c   ****     __HAL_RCC_GPIOG_CLK_ENABLE();
 239              		.loc 1 189 5 view .LVU59
 240 0042 D3F8E020 		ldr	r2, [r3, #224]
 241 0046 02F00402 		and	r2, r2, #4
 242 004a 0192     		str	r2, [sp, #4]
 189:Src/hrtim.c   ****     __HAL_RCC_GPIOG_CLK_ENABLE();
 243              		.loc 1 189 5 view .LVU60
 244 004c 019A     		ldr	r2, [sp, #4]
 245              	.LBE5:
 189:Src/hrtim.c   ****     __HAL_RCC_GPIOG_CLK_ENABLE();
 246              		.loc 1 189 5 view .LVU61
 190:Src/hrtim.c   ****     /**HRTIM GPIO Configuration
 247              		.loc 1 190 5 view .LVU62
 248              	.LBB6:
 190:Src/hrtim.c   ****     /**HRTIM GPIO Configuration
ARM GAS  /tmp/ccDdYIMt.s 			page 10


 249              		.loc 1 190 5 view .LVU63
 190:Src/hrtim.c   ****     /**HRTIM GPIO Configuration
 250              		.loc 1 190 5 view .LVU64
 251 004e D3F8E020 		ldr	r2, [r3, #224]
 252 0052 42F04002 		orr	r2, r2, #64
 253 0056 C3F8E020 		str	r2, [r3, #224]
 190:Src/hrtim.c   ****     /**HRTIM GPIO Configuration
 254              		.loc 1 190 5 view .LVU65
 255 005a D3F8E030 		ldr	r3, [r3, #224]
 256 005e 03F04003 		and	r3, r3, #64
 257 0062 0293     		str	r3, [sp, #8]
 190:Src/hrtim.c   ****     /**HRTIM GPIO Configuration
 258              		.loc 1 190 5 view .LVU66
 259 0064 029B     		ldr	r3, [sp, #8]
 260              	.LBE6:
 190:Src/hrtim.c   ****     /**HRTIM GPIO Configuration
 261              		.loc 1 190 5 view .LVU67
 198:Src/hrtim.c   ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 262              		.loc 1 198 5 view .LVU68
 198:Src/hrtim.c   ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 263              		.loc 1 198 25 is_stmt 0 view .LVU69
 264 0066 0224     		movs	r4, #2
 265 0068 0394     		str	r4, [sp, #12]
 199:Src/hrtim.c   ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 266              		.loc 1 199 5 is_stmt 1 view .LVU70
 199:Src/hrtim.c   ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 267              		.loc 1 199 26 is_stmt 0 view .LVU71
 268 006a 0494     		str	r4, [sp, #16]
 200:Src/hrtim.c   ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 269              		.loc 1 200 5 is_stmt 1 view .LVU72
 201:Src/hrtim.c   ****     GPIO_InitStruct.Alternate = GPIO_AF3_HRTIM1;
 270              		.loc 1 201 5 view .LVU73
 201:Src/hrtim.c   ****     GPIO_InitStruct.Alternate = GPIO_AF3_HRTIM1;
 271              		.loc 1 201 27 is_stmt 0 view .LVU74
 272 006c 0694     		str	r4, [sp, #24]
 202:Src/hrtim.c   ****     HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 273              		.loc 1 202 5 is_stmt 1 view .LVU75
 202:Src/hrtim.c   ****     HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 274              		.loc 1 202 31 is_stmt 0 view .LVU76
 275 006e 0325     		movs	r5, #3
 276 0070 0795     		str	r5, [sp, #28]
 203:Src/hrtim.c   **** 
 277              		.loc 1 203 5 is_stmt 1 view .LVU77
 278 0072 03A9     		add	r1, sp, #12
 279 0074 0E48     		ldr	r0, .L13+8
 280              	.LVL10:
 203:Src/hrtim.c   **** 
 281              		.loc 1 203 5 is_stmt 0 view .LVU78
 282 0076 FFF7FEFF 		bl	HAL_GPIO_Init
 283              	.LVL11:
 205:Src/hrtim.c   ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 284              		.loc 1 205 5 is_stmt 1 view .LVU79
 205:Src/hrtim.c   ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 285              		.loc 1 205 25 is_stmt 0 view .LVU80
 286 007a C027     		movs	r7, #192
 287 007c 0397     		str	r7, [sp, #12]
 206:Src/hrtim.c   ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
ARM GAS  /tmp/ccDdYIMt.s 			page 11


 288              		.loc 1 206 5 is_stmt 1 view .LVU81
 206:Src/hrtim.c   ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 289              		.loc 1 206 26 is_stmt 0 view .LVU82
 290 007e 0494     		str	r4, [sp, #16]
 207:Src/hrtim.c   ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 291              		.loc 1 207 5 is_stmt 1 view .LVU83
 207:Src/hrtim.c   ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 292              		.loc 1 207 26 is_stmt 0 view .LVU84
 293 0080 0026     		movs	r6, #0
 294 0082 0596     		str	r6, [sp, #20]
 208:Src/hrtim.c   ****     GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 295              		.loc 1 208 5 is_stmt 1 view .LVU85
 208:Src/hrtim.c   ****     GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 296              		.loc 1 208 27 is_stmt 0 view .LVU86
 297 0084 0695     		str	r5, [sp, #24]
 209:Src/hrtim.c   ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 298              		.loc 1 209 5 is_stmt 1 view .LVU87
 209:Src/hrtim.c   ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 299              		.loc 1 209 31 is_stmt 0 view .LVU88
 300 0086 0123     		movs	r3, #1
 301 0088 0793     		str	r3, [sp, #28]
 210:Src/hrtim.c   **** 
 302              		.loc 1 210 5 is_stmt 1 view .LVU89
 303 008a 03A9     		add	r1, sp, #12
 304 008c 0948     		ldr	r0, .L13+12
 305 008e FFF7FEFF 		bl	HAL_GPIO_Init
 306              	.LVL12:
 212:Src/hrtim.c   ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 307              		.loc 1 212 5 view .LVU90
 212:Src/hrtim.c   ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 308              		.loc 1 212 25 is_stmt 0 view .LVU91
 309 0092 0397     		str	r7, [sp, #12]
 213:Src/hrtim.c   ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 310              		.loc 1 213 5 is_stmt 1 view .LVU92
 213:Src/hrtim.c   ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 311              		.loc 1 213 26 is_stmt 0 view .LVU93
 312 0094 0494     		str	r4, [sp, #16]
 214:Src/hrtim.c   ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 313              		.loc 1 214 5 is_stmt 1 view .LVU94
 214:Src/hrtim.c   ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 314              		.loc 1 214 26 is_stmt 0 view .LVU95
 315 0096 0596     		str	r6, [sp, #20]
 215:Src/hrtim.c   ****     GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 316              		.loc 1 215 5 is_stmt 1 view .LVU96
 215:Src/hrtim.c   ****     GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 317              		.loc 1 215 27 is_stmt 0 view .LVU97
 318 0098 0695     		str	r5, [sp, #24]
 216:Src/hrtim.c   ****     HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 319              		.loc 1 216 5 is_stmt 1 view .LVU98
 216:Src/hrtim.c   ****     HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 320              		.loc 1 216 31 is_stmt 0 view .LVU99
 321 009a 0794     		str	r4, [sp, #28]
 217:Src/hrtim.c   **** 
 322              		.loc 1 217 5 is_stmt 1 view .LVU100
 323 009c 03A9     		add	r1, sp, #12
 324 009e 0648     		ldr	r0, .L13+16
 325 00a0 FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  /tmp/ccDdYIMt.s 			page 12


 326              	.LVL13:
 327              		.loc 1 224 1 is_stmt 0 view .LVU101
 328 00a4 B8E7     		b	.L9
 329              	.L14:
 330 00a6 00BF     		.align	2
 331              	.L13:
 332 00a8 00740140 		.word	1073837056
 333 00ac 00440258 		.word	1476543488
 334 00b0 00100258 		.word	1476530176
 335 00b4 00080258 		.word	1476528128
 336 00b8 00180258 		.word	1476532224
 337              		.cfi_endproc
 338              	.LFE337:
 340              		.section	.text.MX_HRTIM_Init,"ax",%progbits
 341              		.align	1
 342              		.global	MX_HRTIM_Init
 343              		.syntax unified
 344              		.thumb
 345              		.thumb_func
 347              	MX_HRTIM_Init:
 348              	.LFB335:
  31:Src/hrtim.c   **** 
 349              		.loc 1 31 1 is_stmt 1 view -0
 350              		.cfi_startproc
 351              		@ args = 0, pretend = 0, frame = 152
 352              		@ frame_needed = 0, uses_anonymous_args = 0
 353 0000 10B5     		push	{r4, lr}
 354              	.LCFI8:
 355              		.cfi_def_cfa_offset 8
 356              		.cfi_offset 4, -8
 357              		.cfi_offset 14, -4
 358 0002 A6B0     		sub	sp, sp, #152
 359              	.LCFI9:
 360              		.cfi_def_cfa_offset 160
  37:Src/hrtim.c   ****   HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 361              		.loc 1 37 3 view .LVU103
  37:Src/hrtim.c   ****   HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 362              		.loc 1 37 25 is_stmt 0 view .LVU104
 363 0004 0024     		movs	r4, #0
 364 0006 2294     		str	r4, [sp, #136]
 365 0008 2394     		str	r4, [sp, #140]
 366 000a 2494     		str	r4, [sp, #144]
 367 000c 2594     		str	r4, [sp, #148]
  38:Src/hrtim.c   ****   HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 368              		.loc 1 38 3 is_stmt 1 view .LVU105
  38:Src/hrtim.c   ****   HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 369              		.loc 1 38 28 is_stmt 0 view .LVU106
 370 000e 1E94     		str	r4, [sp, #120]
 371 0010 1F94     		str	r4, [sp, #124]
 372 0012 2094     		str	r4, [sp, #128]
 373 0014 2194     		str	r4, [sp, #132]
  39:Src/hrtim.c   ****   HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 374              		.loc 1 39 3 is_stmt 1 view .LVU107
  39:Src/hrtim.c   ****   HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 375              		.loc 1 39 25 is_stmt 0 view .LVU108
 376 0016 5422     		movs	r2, #84
 377 0018 2146     		mov	r1, r4
ARM GAS  /tmp/ccDdYIMt.s 			page 13


 378 001a 09A8     		add	r0, sp, #36
 379 001c FFF7FEFF 		bl	memset
 380              	.LVL14:
  40:Src/hrtim.c   **** 
 381              		.loc 1 40 3 is_stmt 1 view .LVU109
  40:Src/hrtim.c   **** 
 382              		.loc 1 40 26 is_stmt 0 view .LVU110
 383 0020 2022     		movs	r2, #32
 384 0022 2146     		mov	r1, r4
 385 0024 01A8     		add	r0, sp, #4
 386 0026 FFF7FEFF 		bl	memset
 387              	.LVL15:
  45:Src/hrtim.c   ****   hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 388              		.loc 1 45 3 is_stmt 1 view .LVU111
  45:Src/hrtim.c   ****   hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 389              		.loc 1 45 19 is_stmt 0 view .LVU112
 390 002a 5448     		ldr	r0, .L39
 391 002c 544B     		ldr	r3, .L39+4
 392 002e 0360     		str	r3, [r0]
  46:Src/hrtim.c   ****   hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 393              		.loc 1 46 3 is_stmt 1 view .LVU113
  46:Src/hrtim.c   ****   hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 394              		.loc 1 46 39 is_stmt 0 view .LVU114
 395 0030 4460     		str	r4, [r0, #4]
  47:Src/hrtim.c   ****   if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 396              		.loc 1 47 3 is_stmt 1 view .LVU115
  47:Src/hrtim.c   ****   if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 397              		.loc 1 47 27 is_stmt 0 view .LVU116
 398 0032 8460     		str	r4, [r0, #8]
  48:Src/hrtim.c   ****   {
 399              		.loc 1 48 3 is_stmt 1 view .LVU117
  48:Src/hrtim.c   ****   {
 400              		.loc 1 48 7 is_stmt 0 view .LVU118
 401 0034 FFF7FEFF 		bl	HAL_HRTIM_Init
 402              	.LVL16:
  48:Src/hrtim.c   ****   {
 403              		.loc 1 48 6 view .LVU119
 404 0038 0028     		cmp	r0, #0
 405 003a 7ED1     		bne	.L28
 406              	.L16:
  52:Src/hrtim.c   ****   {
 407              		.loc 1 52 3 is_stmt 1 view .LVU120
  52:Src/hrtim.c   ****   {
 408              		.loc 1 52 7 is_stmt 0 view .LVU121
 409 003c 0021     		movs	r1, #0
 410 003e 4F48     		ldr	r0, .L39
 411 0040 FFF7FEFF 		bl	HAL_HRTIM_FaultPrescalerConfig
 412              	.LVL17:
  52:Src/hrtim.c   ****   {
 413              		.loc 1 52 6 view .LVU122
 414 0044 0028     		cmp	r0, #0
 415 0046 7BD1     		bne	.L29
 416              	.L17:
  56:Src/hrtim.c   ****   pFaultCfg.Polarity = HRTIM_FAULTPOLARITY_HIGH;
 417              		.loc 1 56 3 is_stmt 1 view .LVU123
  56:Src/hrtim.c   ****   pFaultCfg.Polarity = HRTIM_FAULTPOLARITY_HIGH;
 418              		.loc 1 56 20 is_stmt 0 view .LVU124
ARM GAS  /tmp/ccDdYIMt.s 			page 14


 419 0048 0023     		movs	r3, #0
 420 004a 2293     		str	r3, [sp, #136]
  57:Src/hrtim.c   ****   pFaultCfg.Filter = HRTIM_FAULTFILTER_NONE;
 421              		.loc 1 57 3 is_stmt 1 view .LVU125
  57:Src/hrtim.c   ****   pFaultCfg.Filter = HRTIM_FAULTFILTER_NONE;
 422              		.loc 1 57 22 is_stmt 0 view .LVU126
 423 004c 0222     		movs	r2, #2
 424 004e 2392     		str	r2, [sp, #140]
  58:Src/hrtim.c   ****   pFaultCfg.Lock = HRTIM_FAULTLOCK_READWRITE;
 425              		.loc 1 58 3 is_stmt 1 view .LVU127
  58:Src/hrtim.c   ****   pFaultCfg.Lock = HRTIM_FAULTLOCK_READWRITE;
 426              		.loc 1 58 20 is_stmt 0 view .LVU128
 427 0050 2493     		str	r3, [sp, #144]
  59:Src/hrtim.c   ****   if (HAL_HRTIM_FaultConfig(&hhrtim, HRTIM_FAULT_3, &pFaultCfg) != HAL_OK)
 428              		.loc 1 59 3 is_stmt 1 view .LVU129
  59:Src/hrtim.c   ****   if (HAL_HRTIM_FaultConfig(&hhrtim, HRTIM_FAULT_3, &pFaultCfg) != HAL_OK)
 429              		.loc 1 59 18 is_stmt 0 view .LVU130
 430 0052 2593     		str	r3, [sp, #148]
  60:Src/hrtim.c   ****   {
 431              		.loc 1 60 3 is_stmt 1 view .LVU131
  60:Src/hrtim.c   ****   {
 432              		.loc 1 60 7 is_stmt 0 view .LVU132
 433 0054 22AA     		add	r2, sp, #136
 434 0056 0421     		movs	r1, #4
 435 0058 4848     		ldr	r0, .L39
 436 005a FFF7FEFF 		bl	HAL_HRTIM_FaultConfig
 437              	.LVL18:
  60:Src/hrtim.c   ****   {
 438              		.loc 1 60 6 view .LVU133
 439 005e 0028     		cmp	r0, #0
 440 0060 71D1     		bne	.L30
 441              	.L18:
  64:Src/hrtim.c   ****   pTimeBaseCfg.Period = 0xFFFD;
 442              		.loc 1 64 3 is_stmt 1 view .LVU134
 443 0062 464C     		ldr	r4, .L39
 444 0064 0122     		movs	r2, #1
 445 0066 0421     		movs	r1, #4
 446 0068 2046     		mov	r0, r4
 447 006a FFF7FEFF 		bl	HAL_HRTIM_FaultModeCtl
 448              	.LVL19:
  65:Src/hrtim.c   ****   pTimeBaseCfg.RepetitionCounter = 0x00;
 449              		.loc 1 65 3 view .LVU135
  65:Src/hrtim.c   ****   pTimeBaseCfg.RepetitionCounter = 0x00;
 450              		.loc 1 65 23 is_stmt 0 view .LVU136
 451 006e 4FF6FD73 		movw	r3, #65533
 452 0072 1E93     		str	r3, [sp, #120]
  66:Src/hrtim.c   ****   pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 453              		.loc 1 66 3 is_stmt 1 view .LVU137
  66:Src/hrtim.c   ****   pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 454              		.loc 1 66 34 is_stmt 0 view .LVU138
 455 0074 0021     		movs	r1, #0
 456 0076 1F91     		str	r1, [sp, #124]
  67:Src/hrtim.c   ****   pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 457              		.loc 1 67 3 is_stmt 1 view .LVU139
  67:Src/hrtim.c   ****   pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 458              		.loc 1 67 31 is_stmt 0 view .LVU140
 459 0078 0523     		movs	r3, #5
ARM GAS  /tmp/ccDdYIMt.s 			page 15


 460 007a 2093     		str	r3, [sp, #128]
  68:Src/hrtim.c   ****   if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 461              		.loc 1 68 3 is_stmt 1 view .LVU141
  68:Src/hrtim.c   ****   if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 462              		.loc 1 68 21 is_stmt 0 view .LVU142
 463 007c 0823     		movs	r3, #8
 464 007e 2193     		str	r3, [sp, #132]
  69:Src/hrtim.c   ****   {
 465              		.loc 1 69 3 is_stmt 1 view .LVU143
  69:Src/hrtim.c   ****   {
 466              		.loc 1 69 7 is_stmt 0 view .LVU144
 467 0080 1EAA     		add	r2, sp, #120
 468 0082 2046     		mov	r0, r4
 469 0084 FFF7FEFF 		bl	HAL_HRTIM_TimeBaseConfig
 470              	.LVL20:
  69:Src/hrtim.c   ****   {
 471              		.loc 1 69 6 view .LVU145
 472 0088 0028     		cmp	r0, #0
 473 008a 5FD1     		bne	.L31
 474              	.L19:
  73:Src/hrtim.c   ****   pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 475              		.loc 1 73 3 is_stmt 1 view .LVU146
  73:Src/hrtim.c   ****   pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 476              		.loc 1 73 31 is_stmt 0 view .LVU147
 477 008c 0021     		movs	r1, #0
 478 008e 0991     		str	r1, [sp, #36]
  74:Src/hrtim.c   ****   pTimerCfg.DMASrcAddress = 0x0000;
 479              		.loc 1 74 3 is_stmt 1 view .LVU148
  74:Src/hrtim.c   ****   pTimerCfg.DMASrcAddress = 0x0000;
 480              		.loc 1 74 25 is_stmt 0 view .LVU149
 481 0090 0A91     		str	r1, [sp, #40]
  75:Src/hrtim.c   ****   pTimerCfg.DMADstAddress = 0x0000;
 482              		.loc 1 75 3 is_stmt 1 view .LVU150
  75:Src/hrtim.c   ****   pTimerCfg.DMADstAddress = 0x0000;
 483              		.loc 1 75 27 is_stmt 0 view .LVU151
 484 0092 0B91     		str	r1, [sp, #44]
  76:Src/hrtim.c   ****   pTimerCfg.DMASize = 0x1;
 485              		.loc 1 76 3 is_stmt 1 view .LVU152
  76:Src/hrtim.c   ****   pTimerCfg.DMASize = 0x1;
 486              		.loc 1 76 27 is_stmt 0 view .LVU153
 487 0094 0C91     		str	r1, [sp, #48]
  77:Src/hrtim.c   ****   pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 488              		.loc 1 77 3 is_stmt 1 view .LVU154
  77:Src/hrtim.c   ****   pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 489              		.loc 1 77 21 is_stmt 0 view .LVU155
 490 0096 0123     		movs	r3, #1
 491 0098 0D93     		str	r3, [sp, #52]
  78:Src/hrtim.c   ****   pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 492              		.loc 1 78 3 is_stmt 1 view .LVU156
  78:Src/hrtim.c   ****   pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 493              		.loc 1 78 28 is_stmt 0 view .LVU157
 494 009a 0E91     		str	r1, [sp, #56]
  79:Src/hrtim.c   ****   pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 495              		.loc 1 79 3 is_stmt 1 view .LVU158
  79:Src/hrtim.c   ****   pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 496              		.loc 1 79 25 is_stmt 0 view .LVU159
 497 009c 0F91     		str	r1, [sp, #60]
ARM GAS  /tmp/ccDdYIMt.s 			page 16


  80:Src/hrtim.c   ****   pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 498              		.loc 1 80 3 is_stmt 1 view .LVU160
  80:Src/hrtim.c   ****   pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 499              		.loc 1 80 25 is_stmt 0 view .LVU161
 500 009e 1091     		str	r1, [sp, #64]
  81:Src/hrtim.c   ****   pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 501              		.loc 1 81 3 is_stmt 1 view .LVU162
  81:Src/hrtim.c   ****   pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 502              		.loc 1 81 24 is_stmt 0 view .LVU163
 503 00a0 1191     		str	r1, [sp, #68]
  82:Src/hrtim.c   ****   pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 504              		.loc 1 82 3 is_stmt 1 view .LVU164
  82:Src/hrtim.c   ****   pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 505              		.loc 1 82 27 is_stmt 0 view .LVU165
 506 00a2 1291     		str	r1, [sp, #72]
  83:Src/hrtim.c   ****   pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 507              		.loc 1 83 3 is_stmt 1 view .LVU166
  83:Src/hrtim.c   ****   pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 508              		.loc 1 83 26 is_stmt 0 view .LVU167
 509 00a4 1391     		str	r1, [sp, #76]
  84:Src/hrtim.c   ****   pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 510              		.loc 1 84 3 is_stmt 1 view .LVU168
  84:Src/hrtim.c   ****   pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 511              		.loc 1 84 23 is_stmt 0 view .LVU169
 512 00a6 1491     		str	r1, [sp, #80]
  85:Src/hrtim.c   ****   pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 513              		.loc 1 85 3 is_stmt 1 view .LVU170
  85:Src/hrtim.c   ****   pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 514              		.loc 1 85 30 is_stmt 0 view .LVU171
 515 00a8 1591     		str	r1, [sp, #84]
  86:Src/hrtim.c   ****   pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 516              		.loc 1 86 3 is_stmt 1 view .LVU172
  86:Src/hrtim.c   ****   pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 517              		.loc 1 86 22 is_stmt 0 view .LVU173
 518 00aa 1691     		str	r1, [sp, #88]
  87:Src/hrtim.c   ****   pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 519              		.loc 1 87 3 is_stmt 1 view .LVU174
  87:Src/hrtim.c   ****   pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 520              		.loc 1 87 25 is_stmt 0 view .LVU175
 521 00ac 1791     		str	r1, [sp, #92]
  88:Src/hrtim.c   ****   pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 522              		.loc 1 88 3 is_stmt 1 view .LVU176
  88:Src/hrtim.c   ****   pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 523              		.loc 1 88 23 is_stmt 0 view .LVU177
 524 00ae 1891     		str	r1, [sp, #96]
  89:Src/hrtim.c   ****   pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 525              		.loc 1 89 3 is_stmt 1 view .LVU178
  89:Src/hrtim.c   ****   pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 526              		.loc 1 89 31 is_stmt 0 view .LVU179
 527 00b0 1991     		str	r1, [sp, #100]
  90:Src/hrtim.c   ****   pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 528              		.loc 1 90 3 is_stmt 1 view .LVU180
  90:Src/hrtim.c   ****   pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 529              		.loc 1 90 35 is_stmt 0 view .LVU181
 530 00b2 1A91     		str	r1, [sp, #104]
  91:Src/hrtim.c   ****   pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 531              		.loc 1 91 3 is_stmt 1 view .LVU182
ARM GAS  /tmp/ccDdYIMt.s 			page 17


  91:Src/hrtim.c   ****   pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 532              		.loc 1 91 27 is_stmt 0 view .LVU183
 533 00b4 1B91     		str	r1, [sp, #108]
  92:Src/hrtim.c   ****   pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 534              		.loc 1 92 3 is_stmt 1 view .LVU184
  92:Src/hrtim.c   ****   pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 535              		.loc 1 92 26 is_stmt 0 view .LVU185
 536 00b6 1C91     		str	r1, [sp, #112]
  93:Src/hrtim.c   ****   if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 537              		.loc 1 93 3 is_stmt 1 view .LVU186
  93:Src/hrtim.c   ****   if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 538              		.loc 1 93 25 is_stmt 0 view .LVU187
 539 00b8 1D91     		str	r1, [sp, #116]
  94:Src/hrtim.c   ****   {
 540              		.loc 1 94 3 is_stmt 1 view .LVU188
  94:Src/hrtim.c   ****   {
 541              		.loc 1 94 7 is_stmt 0 view .LVU189
 542 00ba 09AA     		add	r2, sp, #36
 543 00bc 2F48     		ldr	r0, .L39
 544 00be FFF7FEFF 		bl	HAL_HRTIM_WaveformTimerConfig
 545              	.LVL21:
  94:Src/hrtim.c   ****   {
 546              		.loc 1 94 6 view .LVU190
 547 00c2 0028     		cmp	r0, #0
 548 00c4 45D1     		bne	.L32
 549              	.L20:
  98:Src/hrtim.c   ****   if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 550              		.loc 1 98 3 is_stmt 1 view .LVU191
  98:Src/hrtim.c   ****   if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 551              		.loc 1 98 35 is_stmt 0 view .LVU192
 552 00c6 0023     		movs	r3, #0
 553 00c8 1A93     		str	r3, [sp, #104]
  99:Src/hrtim.c   ****   {
 554              		.loc 1 99 3 is_stmt 1 view .LVU193
  99:Src/hrtim.c   ****   {
 555              		.loc 1 99 7 is_stmt 0 view .LVU194
 556 00ca 09AA     		add	r2, sp, #36
 557 00cc 0421     		movs	r1, #4
 558 00ce 2B48     		ldr	r0, .L39
 559 00d0 FFF7FEFF 		bl	HAL_HRTIM_WaveformTimerConfig
 560              	.LVL22:
  99:Src/hrtim.c   ****   {
 561              		.loc 1 99 6 view .LVU195
 562 00d4 0028     		cmp	r0, #0
 563 00d6 3FD1     		bne	.L33
 564              	.L21:
 103:Src/hrtim.c   ****   pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 565              		.loc 1 103 3 is_stmt 1 view .LVU196
 103:Src/hrtim.c   ****   pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 566              		.loc 1 103 23 is_stmt 0 view .LVU197
 567 00d8 0021     		movs	r1, #0
 568 00da 0191     		str	r1, [sp, #4]
 104:Src/hrtim.c   ****   pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 569              		.loc 1 104 3 is_stmt 1 view .LVU198
 104:Src/hrtim.c   ****   pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 570              		.loc 1 104 24 is_stmt 0 view .LVU199
 571 00dc 0291     		str	r1, [sp, #8]
ARM GAS  /tmp/ccDdYIMt.s 			page 18


 105:Src/hrtim.c   ****   pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 572              		.loc 1 105 3 is_stmt 1 view .LVU200
 105:Src/hrtim.c   ****   pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 573              		.loc 1 105 26 is_stmt 0 view .LVU201
 574 00de 0391     		str	r1, [sp, #12]
 106:Src/hrtim.c   ****   pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 575              		.loc 1 106 3 is_stmt 1 view .LVU202
 106:Src/hrtim.c   ****   pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 576              		.loc 1 106 23 is_stmt 0 view .LVU203
 577 00e0 0491     		str	r1, [sp, #16]
 107:Src/hrtim.c   ****   pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 578              		.loc 1 107 3 is_stmt 1 view .LVU204
 107:Src/hrtim.c   ****   pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 579              		.loc 1 107 24 is_stmt 0 view .LVU205
 580 00e2 0591     		str	r1, [sp, #20]
 108:Src/hrtim.c   ****   pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 581              		.loc 1 108 3 is_stmt 1 view .LVU206
 108:Src/hrtim.c   ****   pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 582              		.loc 1 108 25 is_stmt 0 view .LVU207
 583 00e4 0691     		str	r1, [sp, #24]
 109:Src/hrtim.c   ****   pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 584              		.loc 1 109 3 is_stmt 1 view .LVU208
 109:Src/hrtim.c   ****   pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 585              		.loc 1 109 32 is_stmt 0 view .LVU209
 586 00e6 0791     		str	r1, [sp, #28]
 110:Src/hrtim.c   ****   if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputC
 587              		.loc 1 110 3 is_stmt 1 view .LVU210
 110:Src/hrtim.c   ****   if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputC
 588              		.loc 1 110 36 is_stmt 0 view .LVU211
 589 00e8 0891     		str	r1, [sp, #32]
 111:Src/hrtim.c   ****   {
 590              		.loc 1 111 3 is_stmt 1 view .LVU212
 111:Src/hrtim.c   ****   {
 591              		.loc 1 111 7 is_stmt 0 view .LVU213
 592 00ea 01AB     		add	r3, sp, #4
 593 00ec 0122     		movs	r2, #1
 594 00ee 2348     		ldr	r0, .L39
 595 00f0 FFF7FEFF 		bl	HAL_HRTIM_WaveformOutputConfig
 596              	.LVL23:
 111:Src/hrtim.c   ****   {
 597              		.loc 1 111 6 view .LVU214
 598 00f4 98BB     		cbnz	r0, .L34
 599              	.L22:
 115:Src/hrtim.c   ****   {
 600              		.loc 1 115 3 is_stmt 1 view .LVU215
 115:Src/hrtim.c   ****   {
 601              		.loc 1 115 7 is_stmt 0 view .LVU216
 602 00f6 01AB     		add	r3, sp, #4
 603 00f8 4FF48072 		mov	r2, #256
 604 00fc 0421     		movs	r1, #4
 605 00fe 1F48     		ldr	r0, .L39
 606 0100 FFF7FEFF 		bl	HAL_HRTIM_WaveformOutputConfig
 607              	.LVL24:
 115:Src/hrtim.c   ****   {
 608              		.loc 1 115 6 view .LVU217
 609 0104 70BB     		cbnz	r0, .L35
 610              	.L23:
ARM GAS  /tmp/ccDdYIMt.s 			page 19


 119:Src/hrtim.c   ****   {
 611              		.loc 1 119 3 is_stmt 1 view .LVU218
 119:Src/hrtim.c   ****   {
 612              		.loc 1 119 7 is_stmt 0 view .LVU219
 613 0106 01AB     		add	r3, sp, #4
 614 0108 0222     		movs	r2, #2
 615 010a 0021     		movs	r1, #0
 616 010c 1B48     		ldr	r0, .L39
 617 010e FFF7FEFF 		bl	HAL_HRTIM_WaveformOutputConfig
 618              	.LVL25:
 119:Src/hrtim.c   ****   {
 619              		.loc 1 119 6 view .LVU220
 620 0112 50BB     		cbnz	r0, .L36
 621              	.L24:
 123:Src/hrtim.c   ****   {
 622              		.loc 1 123 3 is_stmt 1 view .LVU221
 123:Src/hrtim.c   ****   {
 623              		.loc 1 123 7 is_stmt 0 view .LVU222
 624 0114 01AB     		add	r3, sp, #4
 625 0116 4FF40072 		mov	r2, #512
 626 011a 0421     		movs	r1, #4
 627 011c 1748     		ldr	r0, .L39
 628 011e FFF7FEFF 		bl	HAL_HRTIM_WaveformOutputConfig
 629              	.LVL26:
 123:Src/hrtim.c   ****   {
 630              		.loc 1 123 6 view .LVU223
 631 0122 28BB     		cbnz	r0, .L37
 632              	.L25:
 127:Src/hrtim.c   ****   {
 633              		.loc 1 127 3 is_stmt 1 view .LVU224
 127:Src/hrtim.c   ****   {
 634              		.loc 1 127 7 is_stmt 0 view .LVU225
 635 0124 1EAA     		add	r2, sp, #120
 636 0126 0421     		movs	r1, #4
 637 0128 1448     		ldr	r0, .L39
 638 012a FFF7FEFF 		bl	HAL_HRTIM_TimeBaseConfig
 639              	.LVL27:
 127:Src/hrtim.c   ****   {
 640              		.loc 1 127 6 view .LVU226
 641 012e 10BB     		cbnz	r0, .L38
 642              	.L26:
 134:Src/hrtim.c   **** 
 643              		.loc 1 134 3 is_stmt 1 view .LVU227
 644 0130 1248     		ldr	r0, .L39
 645 0132 FFF7FEFF 		bl	HAL_HRTIM_MspPostInit
 646              	.LVL28:
 136:Src/hrtim.c   **** 
 647              		.loc 1 136 1 is_stmt 0 view .LVU228
 648 0136 26B0     		add	sp, sp, #152
 649              	.LCFI10:
 650              		.cfi_remember_state
 651              		.cfi_def_cfa_offset 8
 652              		@ sp needed
 653 0138 10BD     		pop	{r4, pc}
 654              	.L28:
 655              	.LCFI11:
 656              		.cfi_restore_state
ARM GAS  /tmp/ccDdYIMt.s 			page 20


  50:Src/hrtim.c   ****   }
 657              		.loc 1 50 5 is_stmt 1 view .LVU229
 658 013a FFF7FEFF 		bl	Error_Handler
 659              	.LVL29:
 660 013e 7DE7     		b	.L16
 661              	.L29:
  54:Src/hrtim.c   ****   }
 662              		.loc 1 54 5 view .LVU230
 663 0140 FFF7FEFF 		bl	Error_Handler
 664              	.LVL30:
 665 0144 80E7     		b	.L17
 666              	.L30:
  62:Src/hrtim.c   ****   }
 667              		.loc 1 62 5 view .LVU231
 668 0146 FFF7FEFF 		bl	Error_Handler
 669              	.LVL31:
 670 014a 8AE7     		b	.L18
 671              	.L31:
  71:Src/hrtim.c   ****   }
 672              		.loc 1 71 5 view .LVU232
 673 014c FFF7FEFF 		bl	Error_Handler
 674              	.LVL32:
 675 0150 9CE7     		b	.L19
 676              	.L32:
  96:Src/hrtim.c   ****   }
 677              		.loc 1 96 5 view .LVU233
 678 0152 FFF7FEFF 		bl	Error_Handler
 679              	.LVL33:
 680 0156 B6E7     		b	.L20
 681              	.L33:
 101:Src/hrtim.c   ****   }
 682              		.loc 1 101 5 view .LVU234
 683 0158 FFF7FEFF 		bl	Error_Handler
 684              	.LVL34:
 685 015c BCE7     		b	.L21
 686              	.L34:
 113:Src/hrtim.c   ****   }
 687              		.loc 1 113 5 view .LVU235
 688 015e FFF7FEFF 		bl	Error_Handler
 689              	.LVL35:
 690 0162 C8E7     		b	.L22
 691              	.L35:
 117:Src/hrtim.c   ****   }
 692              		.loc 1 117 5 view .LVU236
 693 0164 FFF7FEFF 		bl	Error_Handler
 694              	.LVL36:
 695 0168 CDE7     		b	.L23
 696              	.L36:
 121:Src/hrtim.c   ****   }
 697              		.loc 1 121 5 view .LVU237
 698 016a FFF7FEFF 		bl	Error_Handler
 699              	.LVL37:
 700 016e D1E7     		b	.L24
 701              	.L37:
 125:Src/hrtim.c   ****   }
 702              		.loc 1 125 5 view .LVU238
 703 0170 FFF7FEFF 		bl	Error_Handler
ARM GAS  /tmp/ccDdYIMt.s 			page 21


 704              	.LVL38:
 705 0174 D6E7     		b	.L25
 706              	.L38:
 129:Src/hrtim.c   ****   }
 707              		.loc 1 129 5 view .LVU239
 708 0176 FFF7FEFF 		bl	Error_Handler
 709              	.LVL39:
 710 017a D9E7     		b	.L26
 711              	.L40:
 712              		.align	2
 713              	.L39:
 714 017c 00000000 		.word	.LANCHOR0
 715 0180 00740140 		.word	1073837056
 716              		.cfi_endproc
 717              	.LFE335:
 719              		.section	.text.HAL_HRTIM_MspDeInit,"ax",%progbits
 720              		.align	1
 721              		.global	HAL_HRTIM_MspDeInit
 722              		.syntax unified
 723              		.thumb
 724              		.thumb_func
 726              	HAL_HRTIM_MspDeInit:
 727              	.LVL40:
 728              	.LFB338:
 225:Src/hrtim.c   **** 
 226:Src/hrtim.c   **** void HAL_HRTIM_MspDeInit(HRTIM_HandleTypeDef* hrtimHandle)
 227:Src/hrtim.c   **** {
 729              		.loc 1 227 1 view -0
 730              		.cfi_startproc
 731              		@ args = 0, pretend = 0, frame = 0
 732              		@ frame_needed = 0, uses_anonymous_args = 0
 733              		.loc 1 227 1 is_stmt 0 view .LVU241
 734 0000 08B5     		push	{r3, lr}
 735              	.LCFI12:
 736              		.cfi_def_cfa_offset 8
 737              		.cfi_offset 3, -8
 738              		.cfi_offset 14, -4
 228:Src/hrtim.c   **** 
 229:Src/hrtim.c   ****   if(hrtimHandle->Instance==HRTIM1)
 739              		.loc 1 229 3 is_stmt 1 view .LVU242
 740              		.loc 1 229 17 is_stmt 0 view .LVU243
 741 0002 0268     		ldr	r2, [r0]
 742              		.loc 1 229 5 view .LVU244
 743 0004 0D4B     		ldr	r3, .L45
 744 0006 9A42     		cmp	r2, r3
 745 0008 00D0     		beq	.L44
 746              	.LVL41:
 747              	.L41:
 230:Src/hrtim.c   ****   {
 231:Src/hrtim.c   ****   /* USER CODE BEGIN HRTIM1_MspDeInit 0 */
 232:Src/hrtim.c   **** 
 233:Src/hrtim.c   ****   /* USER CODE END HRTIM1_MspDeInit 0 */
 234:Src/hrtim.c   ****     /* Peripheral clock disable */
 235:Src/hrtim.c   ****     __HAL_RCC_HRTIM1_CLK_DISABLE();
 236:Src/hrtim.c   **** 
 237:Src/hrtim.c   ****     /**HRTIM GPIO Configuration
 238:Src/hrtim.c   ****     PD4     ------> HRTIM_FLT3
ARM GAS  /tmp/ccDdYIMt.s 			page 22


 239:Src/hrtim.c   ****     PE1     ------> HRTIM_SCOUT
 240:Src/hrtim.c   ****     PC7     ------> HRTIM_CHA2
 241:Src/hrtim.c   ****     PC6     ------> HRTIM_CHA1
 242:Src/hrtim.c   ****     PG7     ------> HRTIM_CHE2
 243:Src/hrtim.c   ****     PG6     ------> HRTIM_CHE1
 244:Src/hrtim.c   ****     */
 245:Src/hrtim.c   ****     HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4);
 246:Src/hrtim.c   **** 
 247:Src/hrtim.c   ****     HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1);
 248:Src/hrtim.c   **** 
 249:Src/hrtim.c   ****     HAL_GPIO_DeInit(GPIOC, GPIO_PIN_7|GPIO_PIN_6);
 250:Src/hrtim.c   **** 
 251:Src/hrtim.c   ****     HAL_GPIO_DeInit(GPIOG, GPIO_PIN_7|GPIO_PIN_6);
 252:Src/hrtim.c   **** 
 253:Src/hrtim.c   ****   /* USER CODE BEGIN HRTIM1_MspDeInit 1 */
 254:Src/hrtim.c   **** 
 255:Src/hrtim.c   ****   /* USER CODE END HRTIM1_MspDeInit 1 */
 256:Src/hrtim.c   ****   }
 257:Src/hrtim.c   **** }
 748              		.loc 1 257 1 view .LVU245
 749 000a 08BD     		pop	{r3, pc}
 750              	.LVL42:
 751              	.L44:
 235:Src/hrtim.c   **** 
 752              		.loc 1 235 5 is_stmt 1 view .LVU246
 753 000c 0C4A     		ldr	r2, .L45+4
 754 000e D2F8F030 		ldr	r3, [r2, #240]
 755 0012 23F00053 		bic	r3, r3, #536870912
 756 0016 C2F8F030 		str	r3, [r2, #240]
 245:Src/hrtim.c   **** 
 757              		.loc 1 245 5 view .LVU247
 758 001a 1021     		movs	r1, #16
 759 001c 0948     		ldr	r0, .L45+8
 760              	.LVL43:
 245:Src/hrtim.c   **** 
 761              		.loc 1 245 5 is_stmt 0 view .LVU248
 762 001e FFF7FEFF 		bl	HAL_GPIO_DeInit
 763              	.LVL44:
 247:Src/hrtim.c   **** 
 764              		.loc 1 247 5 is_stmt 1 view .LVU249
 765 0022 0221     		movs	r1, #2
 766 0024 0848     		ldr	r0, .L45+12
 767 0026 FFF7FEFF 		bl	HAL_GPIO_DeInit
 768              	.LVL45:
 249:Src/hrtim.c   **** 
 769              		.loc 1 249 5 view .LVU250
 770 002a C021     		movs	r1, #192
 771 002c 0748     		ldr	r0, .L45+16
 772 002e FFF7FEFF 		bl	HAL_GPIO_DeInit
 773              	.LVL46:
 251:Src/hrtim.c   **** 
 774              		.loc 1 251 5 view .LVU251
 775 0032 C021     		movs	r1, #192
 776 0034 0648     		ldr	r0, .L45+20
 777 0036 FFF7FEFF 		bl	HAL_GPIO_DeInit
 778              	.LVL47:
 779              		.loc 1 257 1 is_stmt 0 view .LVU252
ARM GAS  /tmp/ccDdYIMt.s 			page 23


 780 003a E6E7     		b	.L41
 781              	.L46:
 782              		.align	2
 783              	.L45:
 784 003c 00740140 		.word	1073837056
 785 0040 00440258 		.word	1476543488
 786 0044 000C0258 		.word	1476529152
 787 0048 00100258 		.word	1476530176
 788 004c 00080258 		.word	1476528128
 789 0050 00180258 		.word	1476532224
 790              		.cfi_endproc
 791              	.LFE338:
 793              		.global	hhrtim
 794              		.section	.bss.hhrtim,"aw",%nobits
 795              		.align	2
 796              		.set	.LANCHOR0,. + 0
 799              	hhrtim:
 800 0000 00000000 		.space	220
 800      00000000 
 800      00000000 
 800      00000000 
 800      00000000 
 801              		.text
 802              	.Letext0:
 803              		.file 2 "/home/julius/University/JKU/NetworkedES/arm/arm-none-eabi/include/machine/_default_types.
 804              		.file 3 "/home/julius/University/JKU/NetworkedES/arm/arm-none-eabi/include/sys/_stdint.h"
 805              		.file 4 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h743xx.h"
 806              		.file 5 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 807              		.file 6 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rcc_ex.h"
 808              		.file 7 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_gpio.h"
 809              		.file 8 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dma.h"
 810              		.file 9 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_hrtim.h"
 811              		.file 10 "Inc/main.h"
 812              		.file 11 "Inc/hrtim.h"
 813              		.file 12 "<built-in>"
ARM GAS  /tmp/ccDdYIMt.s 			page 24


DEFINED SYMBOLS
                            *ABS*:0000000000000000 hrtim.c
     /tmp/ccDdYIMt.s:19     .text.HAL_HRTIM_MspInit:0000000000000000 $t
     /tmp/ccDdYIMt.s:25     .text.HAL_HRTIM_MspInit:0000000000000000 HAL_HRTIM_MspInit
     /tmp/ccDdYIMt.s:156    .text.HAL_HRTIM_MspInit:000000000000008c $d
     /tmp/ccDdYIMt.s:163    .text.HAL_HRTIM_MspPostInit:0000000000000000 $t
     /tmp/ccDdYIMt.s:169    .text.HAL_HRTIM_MspPostInit:0000000000000000 HAL_HRTIM_MspPostInit
     /tmp/ccDdYIMt.s:332    .text.HAL_HRTIM_MspPostInit:00000000000000a8 $d
     /tmp/ccDdYIMt.s:341    .text.MX_HRTIM_Init:0000000000000000 $t
     /tmp/ccDdYIMt.s:347    .text.MX_HRTIM_Init:0000000000000000 MX_HRTIM_Init
     /tmp/ccDdYIMt.s:714    .text.MX_HRTIM_Init:000000000000017c $d
     /tmp/ccDdYIMt.s:720    .text.HAL_HRTIM_MspDeInit:0000000000000000 $t
     /tmp/ccDdYIMt.s:726    .text.HAL_HRTIM_MspDeInit:0000000000000000 HAL_HRTIM_MspDeInit
     /tmp/ccDdYIMt.s:784    .text.HAL_HRTIM_MspDeInit:000000000000003c $d
     /tmp/ccDdYIMt.s:799    .bss.hhrtim:0000000000000000 hhrtim
     /tmp/ccDdYIMt.s:795    .bss.hhrtim:0000000000000000 $d

UNDEFINED SYMBOLS
memset
HAL_RCCEx_PeriphCLKConfig
HAL_GPIO_Init
Error_Handler
HAL_HRTIM_Init
HAL_HRTIM_FaultPrescalerConfig
HAL_HRTIM_FaultConfig
HAL_HRTIM_FaultModeCtl
HAL_HRTIM_TimeBaseConfig
HAL_HRTIM_WaveformTimerConfig
HAL_HRTIM_WaveformOutputConfig
HAL_GPIO_DeInit
